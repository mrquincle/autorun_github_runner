#!/bin/bash

__cleanup()
{
	SIGNAL=$1

	if [ -n "$SIGNAL" ]
	then
		trap $SIGNAL
		kill -${SIGNAL} $$
	fi
}

__message()
{
	echo
	echo "Usage:"
	echo " $0 <path> <virtual-machine-name> <disk-name> <iso-file> <user> [password]"
	echo ""
	echo "Create a virtual machine including disk with installed operating system and user account."
	echo
	echo "Options:"
	echo " -P, --path                   path that will be used to write the disk and the vm to"
	echo " -v, --virtual-machine-name   free to choose name for the vm"
	echo " -d, --disk-name              free to choose name for the vm"
	echo " -i, --iso-file               iso (only tested with ubuntu-20.04.3-desktop-amd64.iso)"
	echo " -u, --user                   username on vm"
	echo " -p, --password               password of vm user (if omitted, asked for interactively)"
	echo
	echo " -h, --help                   display this help"
	echo
	echo "For more details see https://github.com/mrquincle/autorun_github_runner."
}

trap __message EXIT

# Requires GNU getopt. If long options are required, install it on OS X and FreeBSD.
OPTS=$(getopt --options P:v:d:i:u:p:h \
	--long path:,virtual-machine-name:,disk-name:,iso-file:,user:,password:,help \
	--name "$0" -- "$@")

# If previous command returns non-zero exit code, something went wrong
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$OPTS"

password=
while true; do
	case "$1" in
		-P | --path )
			path="$2";
			shift 2
			;;
		-v | --virtual-machine-name )
			vm="$2"
			shift 2
			;;
		-d | --disk-name )
			disk="$2"
			shift 2
			;;
		-i | --iso-file )
			iso="$2"
			shift 2
			;;
		-u | --user )
			user="$2"
			shift 2
			;;
		-p | --password)
			password="$2"
			shift 2
			;;
		-h | --help)
			exit 0
			;;
		-- )
			shift
			;;
		* )
			break;
			;;
	esac
done

if [ -z "$path" ] || [ -z "$vm" ] || [ -z "$disk" ] || [ -z "$iso" ] || [ -z "$user" ]; then
	echo "Not enough arguments"
	exit
fi

if [ -z "$password" ]; then
	echo -n "No password given, enter it now: "
	read -s password
fi

trap __cleanup EXIT

if [ -z "$password" ]; then
	echo
	echo "Sorry, password required. Exit."
	exit 2
fi

# Only tested with
echo "Note, only tested with ubuntu-20.04.3-desktop-amd64.iso"

# Create a disk of 20 GB
disk_vdi="$path/$disk/$disk.vdi"
echo "Create disk of 20 GB at $disk_vdi"
vboxmanage createhd \
	--filename "$disk_vdi" \
	--format VDI \
	--size 20480

# Create a VM
echo "Create a vm at location $path and and name $vm"
vboxmanage createvm \
	--ostype Ubuntu_64 \
	--basefolder "$path" \
	--register \
	--name "$vm"

vboxmanage storagectl "$vm" \
	--name "SATA" \
	--add sata

vboxmanage storageattach "$vm" \
	--storagectl SATA \
	--port 0 \
	--type hdd \
	--medium "$disk_vdi"

echo "Insert $iso to virtual optical drive"
vboxmanage storageattach "$vm" \
	--storagectl SATA --port 15 --type dvddrive \
	--medium "$iso"

guest_additions_iso="/usr/share/virtualbox/VBoxGuestAdditions.iso"
echo "Only tested with $guest_additions_iso that comes with this Ubuntu distro"

# First we experimented with:
# --script-template="custom/ubuntu_preseed.cfg"
# It is written to /cdrom/preseed.cfg, but lot's of functions don't work.
# For example, package installation,
#   not by d-i pkgsel/include, nor by ubiquity ubiquity/success_command string.
# Using vboxpostinstall.sh is much more convenient.
# We use ./custom/debian_postinstall.sh
post_install_template="./custom/debian_postinstall.sh"

echo "Use host"
cat $post_install_template | grep ^HOST_IP
echo "The line above should not be empty (and same as e.g. hostname -I)"

vboxmanage unattended install "$vm" \
	--user=$user \
	--password=$password \
	--country=NL \
	--hostname=testserver.local \
	--iso="$iso" \
	--additions-iso="$guest_additions_iso" \
	--install-additions \
	--post-install-template="$post_install_template"

# Adjust memory and CPUs.
vboxmanage modifyvm "$vm" \
	--memory 2048 \
	--vram 256 \
	--graphicscontroller vmsvga \
	--cpus 2

echo "Set up normal NAT for the virtual machine"
vboxmanage modifyvm "${vm}" --nic1 NAT --nictype1 virtio

echo "Forward port 2222 on the host to 22 on the client"
vboxmanage modifyvm "$vm" --natpf1 "guestssh,tcp,,2222,,22"

echo "Enable USB on the virtual machine"
vboxmanage modifyvm "$vm" --usb on

echo "Done!"

echo "Call ./serve_contents.sh"

echo "And then ./start_vm.sh $vm"
